import os
import csv
from datetime import datetime
from zoneinfo import ZoneInfo
from telebot import TeleBot
from telebot.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InputFile,
)
from config import ADMIN_IDS
from storage import (
    USERS_FILE,
    save_work_time,
    is_user_approved,
    get_all_users,
    set_user_status,
    deny_user         as reject_user_by_id,
    get_pending_users,
    enable_auto_mode,
    disable_auto_mode,
    is_auto_enabled
)
from reports import generate_excel_report_by_months


TS_ZONE = ZoneInfo("Asia/Bishkek")


AUTO_APPROVED_USERS = {
    378268765: "ErlanNasiev",
    557174721: "BekizhanAbdulzhanov",
}
ALLOWED_AUTO_USERS = AUTO_APPROVED_USERS


def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS


def show_menu(bot: TeleBot, message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        KeyboardButton("üçΩ –í—ã—à–µ–ª –Ω–∞ –æ–±–µ–¥"),
        KeyboardButton("üçΩ –í–µ—Ä–Ω—É–ª—Å—è —Å –æ–±–µ–¥–∞"),
        KeyboardButton("üèÅ –£—à–µ–ª —Å —Ä–∞–±–æ—Ç—ã"),
    )
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


def register_handlers(bot: TeleBot):
    @bot.message_handler(commands=["start"])
    def start_command(message):
        user_id = message.from_user.id
        username = message.from_user.username or f"user_{user_id}"

        if is_user_approved(user_id) or user_id in AUTO_APPROVED_USERS:
            ts = datetime.now(TS_ZONE).strftime("%Y-%m-%d %H:%M:%S")
            save_work_time(user_id, "–ü—Ä–∏—à–µ–ª –Ω–∞ —Ä–∞–±–æ—Ç—É", ts)
            bot.send_message(message.chat.id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –û—Ç–º–µ—Ç–∫–∞ –ø—Ä–∏—Ö–æ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
            show_menu(bot, message)
        else:
            bot.send_message(message.chat.id, "‚ùå –í—ã –Ω–µ –æ–¥–æ–±—Ä–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /register.")

    @bot.message_handler(commands=["register"])
    def register_user(message):
        user_id = message.from_user.id
        username = message.from_user.username or f"user_{user_id}"

        if user_id in AUTO_APPROVED_USERS:
            return bot.send_message(message.chat.id, "‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞—è–≤–∫–∏ –≤ users.csv
        if os.path.exists(USERS_FILE):
            with open(USERS_FILE, "r", encoding="utf-8") as f:
                for row in csv.reader(f):
                    if row and row[0] == str(user_id):
                        return bot.send_message(message.chat.id, "‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –æ–∂–∏–¥–∞–µ—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è.")

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É
        with open(USERS_FILE, "a", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow([user_id, username, "pending"]);

        bot.send_message(message.chat.id, "üìÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        markup = InlineKeyboardMarkup()
        markup.add(
            InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{user_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}")
        )
        for admin_id in ADMIN_IDS:
            try:
                bot.send_message(admin_id, f"üì© –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {user_id})", reply_markup=markup)
            except Exception as e:
                print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("approve_"))
    def handle_approve_user(call):
        if not is_admin(call.from_user.id):
            return bot.answer_callback_query(call.id, "‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")

        user_id = int(call.data.split("_")[1])
        set_user_status(user_id, "approved")
        bot.send_message(call.message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–¥–æ–±—Ä–µ–Ω.")
        try:
            bot.send_message(user_id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
        except Exception as e:
            print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("reject_"))
    def handle_reject_user(call):
        if not is_admin(call.from_user.id):
            return bot.answer_callback_query(call.id, "‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")

        user_id = int(call.data.split("_")[1])
        reject_user_by_id(user_id)
        set_user_status(user_id, "rejected")
        bot.send_message(call.message.chat.id, f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
        try:
            bot.send_message(user_id, "üö´ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        except Exception as e:
            print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    @bot.message_handler(commands=["send_excel_report"])
    def send_excel_report(message):
        user_id = message.from_user.id
        if not (is_user_approved(user_id) or user_id in AUTO_APPROVED_USERS):
            return bot.reply_to(message, "‚ùå –í—ã –Ω–µ –æ–¥–æ–±—Ä–µ–Ω—ã.")

        username = message.from_user.username or f"user_{user_id}"
        buf = generate_excel_report_by_months(user_id, username, today_only=True)
        if buf:
            filename = f"Report_{username}_{datetime.now(TS_ZONE):%Y-%m-%d}.xlsx"
            bot.send_document(message.chat.id, InputFile(buf, filename), caption="üìÑ –í–∞—à –æ—Ç—á—ë—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
        else:
            bot.reply_to(message, "‚ö†Ô∏è –û—Ç—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    @bot.message_handler(func=lambda m: m.text in ["üçΩ –í—ã—à–µ–ª –Ω–∞ –æ–±–µ–¥", "üçΩ –í–µ—Ä–Ω—É–ª—Å—è —Å –æ–±–µ–¥–∞", "üèÅ –£—à–µ–ª —Å —Ä–∞–±–æ—Ç—ã"])
    def handle_actions(message):
        user_id = message.from_user.id
        if not (is_user_approved(user_id) or user_id in AUTO_APPROVED_USERS):
            return bot.reply_to(message, "‚ùå –í—ã –Ω–µ –æ–¥–æ–±—Ä–µ–Ω—ã.")

        action_map = {
            "üçΩ –í—ã—à–µ–ª –Ω–∞ –æ–±–µ–¥": "–í—ã—à–µ–ª –Ω–∞ –æ–±–µ–¥",
            "üçΩ –í–µ—Ä–Ω—É–ª—Å—è —Å –æ–±–µ–¥–∞": "–í–µ—Ä–Ω—É–ª—Å—è —Å –æ–±–µ–¥–∞",
            "üèÅ –£—à–µ–ª —Å —Ä–∞–±–æ—Ç—ã": "–£—à–µ–ª —Å —Ä–∞–±–æ—Ç—ã",
        }
        action = action_map[message.text]
        ts = datetime.now(TS_ZONE).strftime("%Y-%m-%d %H:%M:%S")
        save_work_time(user_id, action, ts)
        bot.reply_to(message, f"‚úÖ –û—Ç–º–µ—á–µ–Ω–æ: {action} ({ts})")

    @bot.message_handler(commands=["all_reports"])
    def all_reports(message):
        if not is_admin(message.from_user.id):
            return bot.reply_to(message, "‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")

        for uid, uname in get_all_users().items():
            buf = generate_excel_report_by_months(int(uid), uname)
            if buf:
                filename = f"Report_{uname}_{datetime.now(TS_ZONE):%Y-%m-%d}.xlsx"
                bot.send_document(message.chat.id, InputFile(buf, filename), caption=f"üìé –û—Ç—á—ë—Ç {uname}")
            else:
                bot.send_message(message.chat.id, f"‚ö†Ô∏è –ù–µ—Ç –æ—Ç—á—ë—Ç–∞ –¥–ª—è {uname}.")

    @bot.message_handler(commands=["whoami"])
    def whoami(message):
        bot.reply_to(message, f"ü™™ –í–∞—à user ID: `{message.from_user.id}`", parse_mode="Markdown")

    @bot.message_handler(commands=["pending"])
    def show_pending_users(message):
        if not is_admin(message.from_user.id):
            return bot.reply_to(message, "‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")

        pending = get_pending_users()
        if not pending:
            return bot.send_message(message.chat.id, "üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ.")

        for uid, uname in pending.items():
            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{uid}"))
            bot.send_message(message.chat.id, f"üë§ @{uname} (ID: {uid})", reply_markup=markup)

    @bot.message_handler(commands=["–∞–≤—Ç–æ—Ä–µ–∂–∏–º_–≤–∫–ª"])
    def auto_mode_on(message):
        uid = message.from_user.id
        if uid not in ALLOWED_AUTO_USERS:
            return bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–≤—Ç–æ-—Ä–µ–∂–∏–º—É.")
        enable_auto_mode(uid)
        bot.send_message(message.chat.id, "‚úÖ –ê–≤—Ç–æ–º–∞—Ä–∫–µ—Ä –≤–∫–ª—é—á—ë–Ω. –ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç–º–µ—á–∞—Ç—å –≤–∞—Å —Å–∞–º.")

    @bot.message_handler(commands=["–∞–≤—Ç–æ—Ä–µ–∂–∏–º_–≤—ã–∫–ª"])
    def auto_mode_off(message):
        uid = message.from_user.id
        if uid not in ALLOWED_AUTO_USERS:
            return bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–≤—Ç–æ-—Ä–µ–∂–∏–º—É.")
        disable_auto_mode(uid)
        bot.send_message(message.chat.id, "üõë –ê–≤—Ç–æ–º–∞—Ä–∫–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω.")
