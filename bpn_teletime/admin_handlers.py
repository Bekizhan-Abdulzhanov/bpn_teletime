import csv
from datetime import datetime
from telebot import TeleBot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from config import ADMIN_IDS
from storage import get_all_users, save_work_time
from reports import generate_excel_report_by_months

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
pending_time_update = {}

def register_admin_handlers(bot: TeleBot):
    @bot.message_handler(commands=['admin', 'menu'])
    def admin_menu(message):
        if message.from_user.id not in ADMIN_IDS:
            return bot.reply_to(message, "‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton("üïí –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", callback_data="change_time"),
            InlineKeyboardButton("üìä –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç—ã –≤—Å–µ–º", callback_data="send_all_reports"),
        )
        bot.send_message(message.chat.id, "üîß –ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data == 'change_time')
    def handle_change_time(call):
        if call.from_user.id not in ADMIN_IDS:
            return bot.answer_callback_query(call.id, "‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        users = get_all_users()
        if not users:
            return bot.answer_callback_query(call.id, "üë• –ù–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        markup = InlineKeyboardMarkup(row_width=1)
        for uid, uname in users.items():
            markup.add(InlineKeyboardButton(f"{uname} ({uid})", callback_data=f"time_user_{uid}"))
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", reply_markup=markup)
        bot.answer_callback_query(call.id)

    @bot.callback_query_handler(func=lambda call: call.data.startswith('time_user_'))
    def handle_time_user_selection(call):
        if call.from_user.id not in ADMIN_IDS:
            return bot.answer_callback_query(call.id, "‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        uid = int(call.data.split('_')[-1])
        pending_time_update[call.message.chat.id] = uid
        bot.send_message(call.message.chat.id,
                         f"–í—ã–±—Ä–∞–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ {uid}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                         "–¥–µ–π—Å—Ç–≤–∏–µ YYYY-MM-DD HH:MM:SS\n"
                         "–ù–∞–ø—Ä–∏–º–µ—Ä: –ü—Ä–∏—à–µ–ª –Ω–∞ —Ä–∞–±–æ—Ç—É 2025-07-04 08:30:00")
        bot.answer_callback_query(call.id)

    @bot.callback_query_handler(func=lambda call: call.data == 'send_all_reports')
    def handle_send_reports(call):
        if call.from_user.id not in ADMIN_IDS:
            return bot.answer_callback_query(call.id, "‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        for uid, uname in get_all_users().items():
            buf = generate_excel_report_by_months(uid, uname)
            if buf:
                filename = f"Report_{uname}_{datetime.now().strftime('%Y-%m-%d')}.xlsx"
                bot.send_document(call.message.chat.id, InputFile(buf, filename), caption=f"–û—Ç—á—ë—Ç {uname}")
        bot.answer_callback_query(call.id, "‚úÖ –û—Ç—á—ë—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ–º.")

    @bot.message_handler(func=lambda message: message.chat.id in pending_time_update)
    def process_time_change(message):
        chat_id = message.chat.id
        uid = pending_time_update.get(chat_id)
        text = message.text
        try:
            action, ts = text.split(' ', 1)
            # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã-–≤—Ä–µ–º–µ–Ω–∏
            datetime.strptime(ts, "%Y-%m-%d %H:%M:%S")
            save_work_time(uid, action, ts)
            bot.reply_to(message, f"‚úÖ –û—Ç–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {action} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid} –≤ {ts}")
        except Exception:
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –¥–µ–π—Å—Ç–≤–∏–µ YYYY-MM-DD HH:MM:SS")
        finally:
            pending_time_update.pop(chat_id, None)


