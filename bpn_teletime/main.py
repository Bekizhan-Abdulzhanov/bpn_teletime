from telebot import TeleBot
from flask import Flask
from waitress import serve
import threading
from apscheduler.schedulers.background import BackgroundScheduler
from dotenv import load_dotenv
import os
import warnings

from config import TOKEN, PORT
from handlers import register_handlers
from schedulers import setup_scheduler
from notifier import setup_notifications

warnings.filterwarnings("ignore", message="Timezone offset does not match system offset")

load_dotenv()
if not TOKEN:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å .env –∏–ª–∏ Railway Variables.")


bot = TeleBot(TOKEN)
app = Flask(__name__)


@app.route('/')
def index():
    return "Bot is running."


def run_flask():
    serve(app, host='0.0.0.0', port=PORT)


if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=run_flask).start()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ (–≤—Å—ë –≤–Ω—É—Ç—Ä–∏ handlers.py)
    register_handlers(bot)

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ñ–¥—ë–º –∫–æ–º–∞–Ω–¥—ã...")

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    scheduler = BackgroundScheduler()
    setup_scheduler(scheduler, bot)
    setup_notifications(scheduler, bot)
    scheduler.start()

    print("Bot is running...")
    bot.infinity_polling()

