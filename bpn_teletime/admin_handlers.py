import os
import csv
from telebot import TeleBot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from config import ADMIN_IDS
from storage import (
    USERS_FILE,
    get_pending_users,
    get_all_users,
    set_user_status,
    enable_auto_mode,
    disable_auto_mode,
    is_auto_enabled
)
from reports import generate_excel_report_by_months


def register_admin_handlers(bot: TeleBot):
    @bot.message_handler(commands=['admin', 'admin_menu'])
    def admin_menu(message):
        if message.from_user.id not in ADMIN_IDS:
            return bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

        markup = InlineKeyboardMarkup(row_width=2)

        # –ó–∞—è–≤–∫–∏ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏
        pending = get_pending_users()
        if pending:
            for uid, uname in pending.items():
                markup.add(
                    InlineKeyboardButton(f"‚úÖ –û–¥–æ–±—Ä–∏—Ç—å {uname}", callback_data=f"approve_{uid}"),
                    InlineKeyboardButton(f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å {uname}", callback_data=f"reject_{uid}")
                )
        else:
            markup.add(InlineKeyboardButton("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ", callback_data="noop"))

        # –û–ø—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ-—Ä–µ–∂–∏–º–∞ –∏ –æ—Ç—á—ë—Ç–æ–≤
        users = get_all_users()
        for uid, uname in users.items():
            status = "ON" if is_auto_enabled(int(uid)) else "OFF"
            # –ö–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ-—Ä–µ–∂–∏–º–∞
            if is_auto_enabled(int(uid)):
                markup.add(
                    InlineKeyboardButton(f"üõë –í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ {uname} ({uid})", callback_data=f"auto_off_{uid}")
                )
            else:
                markup.add(
                    InlineKeyboardButton(f"‚ñ∂Ô∏è –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ {uname} ({uid})", callback_data=f"auto_on_{uid}")
                )
            # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞
            markup.add(
                InlineKeyboardButton(f"üìÑ –û—Ç—á–µ—Ç {uname} ({uid})", callback_data=f"report_{uid}")
            )

        bot.send_message(message.chat.id, "üîß –ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data.split('_')[0] in ['approve', 'reject', 'auto', 'report'])
    def handle_admin_actions(call):
        if call.from_user.id not in ADMIN_IDS:
            return bot.answer_callback_query(call.id, "‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")

        parts = call.data.split("_")
        action = parts[0]

        if action == 'approve':
            uid = int(parts[1])
            set_user_status(uid, "approved")
            bot.answer_callback_query(call.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –æ–¥–æ–±—Ä–µ–Ω.")
            try:
                bot.send_message(uid, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
            except:
                pass
        elif action == 'reject':
            uid = int(parts[1])
            set_user_status(uid, "rejected")
            bot.answer_callback_query(call.id, f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
            try:
                bot.send_message(uid, "üö´ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
            except:
                pass
        elif action in ['auto']:
            # parts[1] should be 'on' or 'off'
            sub = parts[1]
            uid = int(parts[2])
            if sub == 'on':
                enable_auto_mode(uid)
                bot.answer_callback_query(call.id, f"‚úÖ –ê–≤—Ç–æ-—Ä–µ–∂–∏–º –≤–∫–ª—é—á—ë–Ω –¥–ª—è {uid}.")
            else:
                disable_auto_mode(uid)
                bot.answer_callback_query(call.id, f"üõë –ê–≤—Ç–æ-—Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω –¥–ª—è {uid}.")
        elif action == 'report':
            uid = int(parts[1])
            users = get_all_users()
            uname = users.get(str(uid), f"user_{uid}")
            buf = generate_excel_report_by_months(uid, uname)
            if buf:
                filename = f"Report_{uname}_{datetime.now().strftime('%Y-%m-%d')}.xlsx"
                bot.send_document(call.message.chat.id, InputFile(buf, filename))
            else:
                bot.answer_callback_query(call.id, f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {uid}.")
        else:
            bot.answer_callback_query(call.id, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")



