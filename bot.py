import telebot
from datetime import datetime
import csv
import os
from openpyxl import Workbook
from openpyxl.styles import Font, Border, Side, Alignment
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton,ReplyKeyboardMarkup, KeyboardButton
from apscheduler.schedulers.background import BackgroundScheduler
import time
import pytz
import qrcode

os.environ['TZ'] = 'Asia/Bishkek'

kyrgyzstan_tz = pytz.timezone('Asia/Bishkek')
now = datetime.now(kyrgyzstan_tz)

bot = telebot.TeleBot(os.environ.get('BOT_TOKEN'))

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—â–µ–≥–æ QR-–∫–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
common_qr_url = "https://t.me/BPN_KG_managetime_bot?start=checkin"
qr = qrcode.make(common_qr_url)
qr.save("common_qr_code.png")

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
WORKTIME_FILE = 'work_time.csv'
EXCEL_REPORT_DIR = 'work_reports'
USERS_FILE = 'users.csv'
ADMIN_ID = 557174721

  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞


# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
if not os.path.exists(EXCEL_REPORT_DIR):
    os.makedirs(EXCEL_REPORT_DIR)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã
def save_work_time(user_id, user_name, action): 
    now = datetime.now(kyrgyzstan_tz).strftime("%Y-%m-%d %H:%M:%S")  # –£—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É
    file_exists = os.path.isfile(WORKTIME_FILE) 

    try: 
        with open(WORKTIME_FILE, mode='a', newline='', encoding='utf-8') as file: 
            writer = csv.writer(file) 
            if not file_exists: 
                writer.writerow(["User ID", "User Name", "Action", "Timestamp"]) 
            writer.writerow([user_id, user_name, action, now]) 
        print(f"[{now}] –ó–∞–ø–∏—Å–∞–Ω–æ: {user_name} ({user_id}) - {action}") 
    except Exception as e: 
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}") 

# –í –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö, –≥–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Ä–µ–º—è, —Ç–∞–∫–∂–µ –∑–∞–º–µ–Ω–∏–º –Ω–∞:
now = datetime.now(kyrgyzstan_tz).strftime("%Y-%m-%d %H:%M:%S")

scheduler = BackgroundScheduler()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
@bot.message_handler(commands=['register'])
def register(message):
    user = message.from_user
    with open(USERS_FILE, mode='a', newline='', encoding='utf-8') as file:
        writer = csv.writer(file)
        writer.writerow([user.id, user.username, 'pending'])
    bot.send_message(ADMIN_ID, f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç {user.username} ({user.id})",
                     reply_markup=approve_keyboard(user.id))
    bot.reply_to(message, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
def approve_keyboard(user_id):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_{user_id}"))
    markup.add(InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}"))
    return markup

@bot.callback_query_handler(func=lambda call: call.data.startswith("approve_"))
def approve_user(call):
    user_id = call.data.split("_")[1]
    update_user_status(user_id, "approved")
    bot.send_message(user_id, "–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–¥–æ–±—Ä–µ–Ω–∞!")
    bot.send_message(ADMIN_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–¥–æ–±—Ä–µ–Ω.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("reject_"))
def reject_user(call):
    user_id = call.data.split("_")[1]
    update_user_status(user_id, "rejected")
    bot.send_message(user_id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    bot.send_message(ADMIN_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_user_status(user_id, status):
    users = []
    with open(USERS_FILE, mode='r', encoding='utf-8') as file:
        reader = csv.reader(file)
        for row in reader:
            if row[0] == user_id:
                row[2] = status
            users.append(row)
    with open(USERS_FILE, mode='w', newline='', encoding='utf-8') as file:
        writer = csv.writer(file)
        writer.writerows(users)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
def is_user_approved(user_id):
    with open(USERS_FILE, mode='r', encoding='utf-8') as file:
        reader = csv.reader(file)
        for row in reader:
            if row[0] == str(user_id) and row[2] == 'approved':
                return True
    return False


# –ú–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
@bot.message_handler(commands=['1'])
def show_menu(message):
    if not is_user_approved(message.from_user.id):
        bot.reply_to(message, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞.")
        return

    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    markup.add(
        KeyboardButton("üçΩ –í—ã—à–µ–ª –Ω–∞ –æ–±–µ–¥")
    )
    markup.add(
        KeyboardButton("üçΩ –í–µ—Ä–Ω—É–ª—Å—è —Å –æ–±–µ–¥–∞"),
        KeyboardButton("üèÅ –£—à–µ–ª —Å —Ä–∞–±–æ—Ç—ã")
    )
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
@bot.message_handler(func=lambda message: message.text in [ "üçΩ –í—ã—à–µ–ª –Ω–∞ –æ–±–µ–¥", "üçΩ –í–µ—Ä–Ω—É–ª—Å—è —Å –æ–±–µ–¥–∞", "üèÅ –£—à–µ–ª —Å —Ä–∞–±–æ—Ç—ã"])
def handle_work_time(message):
    if not is_user_approved(message.from_user.id):
        bot.reply_to(message, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞.")
        return

    user = message.from_user
    actions = {
        "üçΩ –í—ã—à–µ–ª –Ω–∞ –æ–±–µ–¥": "–í—ã—à–µ–ª –Ω–∞ –æ–±–µ–¥",
        "üçΩ –í–µ—Ä–Ω—É–ª—Å—è —Å –æ–±–µ–¥–∞": "–í–µ—Ä–Ω—É–ª—Å—è —Å –æ–±–µ–¥–∞",
        "üèÅ –£—à–µ–ª —Å —Ä–∞–±–æ—Ç—ã": "–£—à–µ–ª —Å —Ä–∞–±–æ—Ç—ã"
    }
    
    action = actions[message.text]
    save_work_time(user.id, user.username, action)
    bot.reply_to(message, f"–í—ã –æ—Ç–º–µ—Ç–∏–ª–∏: {message.text}")


# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
def start_work(message):
    if not is_user_approved(message.from_user.id):
        bot.reply_to(message, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞.")
        return
    user = message.from_user
    save_work_time(user.id, user.username, "–ü—Ä–∏—à–µ–ª –Ω–∞ —Ä–∞–±–æ—Ç—É")
    bot.reply_to(message, f"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, {user.first_name}! –í—ã –æ—Ç–º–µ—Ç–∏–ª–∏ –ø—Ä–∏—Ö–æ–¥ –Ω–∞ —Ä–∞–±–æ—Ç—É.")

@bot.message_handler(commands=['lunch_out'])
def lunch_out(message):
    if not is_user_approved(message.from_user.id):
        bot.reply_to(message, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞.")
        return    
    user = message.from_user
    save_work_time(user.id, user.username, "–í—ã—à–µ–ª –Ω–∞ –æ–±–µ–¥")
    bot.reply_to(message, "–í—ã –æ—Ç–º–µ—Ç–∏–ª–∏ –≤—ã—Ö–æ–¥ –Ω–∞ –æ–±–µ–¥.")

@bot.message_handler(commands=['lunch_in'])
def lunch_in(message):
    if not is_user_approved(message.from_user.id):
        bot.reply_to(message, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞.")
        return    
    user = message.from_user
    save_work_time(user.id, user.username, "–í–µ—Ä–Ω—É–ª—Å—è —Å –æ–±–µ–¥–∞")
    bot.reply_to(message, "–í—ã –æ—Ç–º–µ—Ç–∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ —Å –æ–±–µ–¥–∞.")

@bot.message_handler(commands=['end'])
def end_work(message):
    if not is_user_approved(message.from_user.id):
        bot.reply_to(message, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞.")
        return     
    user = message.from_user
    save_work_time(user.id, user.username, "–£—à–µ–ª —Å —Ä–∞–±–æ—Ç—ã")
    bot.reply_to(message, f"–î–æ —Å–≤–∏–¥–∞–Ω–∏—è, {user.first_name}! –í—ã –æ—Ç–º–µ—Ç–∏–ª–∏ —É—Ö–æ–¥ —Å —Ä–∞–±–æ—Ç—ã.")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –≤ Excel –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@bot.message_handler(commands=['all_reports'])
def all_reports(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.")
        return
    for user_id in get_all_users():
        report_file = generate_excel_report(user_id)
        if report_file:
            with open(report_file, 'rb') as file:
                bot.send_document(ADMIN_ID, file, caption=f"–û—Ç—á–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {user_id}")

@bot.message_handler(commands=['edit_time'])
def edit_time(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
        return
    
    markup = InlineKeyboardMarkup()
    
    if not os.path.exists(WORKTIME_FILE):
        bot.reply_to(message, "–§–∞–π–ª —Å —Ä–∞–±–æ—á–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return
    
    users = {}
    with open(WORKTIME_FILE, mode='r', encoding='utf-8') as file:
        reader = csv.reader(file)
        next(reader, None)  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        for row in reader:
            if len(row) < 2:
                continue
            user_id, user_name = row[0], row[1]
            users[user_id] = user_name

    for user_id, user_name in users.items():
        markup.add(InlineKeyboardButton(text=user_name, callback_data=f"edit_{user_id}"))

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_"))
def select_employee(call):
    user_id = call.data.split("_")[1]
    
    markup = InlineKeyboardMarkup()
    
    dates = set()
    with open(WORKTIME_FILE, mode='r', encoding='utf-8') as file:
        reader = csv.reader(file)
        next(reader, None)
        for row in reader:
            if len(row) < 4:
                continue
            if row[0] == user_id:
                date = row[3].split()[0]
                dates.add(date)

    for date in sorted(dates):
        markup.add(InlineKeyboardButton(text=date, callback_data=f"date_{user_id}_{date}"))

    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("date_"))
def select_date(call):
    _, user_id, date = call.data.split("_")

    markup = InlineKeyboardMarkup()
    actions = ["–ü—Ä–∏—à–µ–ª –Ω–∞ —Ä–∞–±–æ—Ç—É", "–í—ã—à–µ–ª –Ω–∞ –æ–±–µ–¥", "–í–µ—Ä–Ω—É–ª—Å—è —Å –æ–±–µ–¥–∞", "–£—à–µ–ª —Å —Ä–∞–±–æ—Ç—ã"]

    for action in actions:
        markup.add(InlineKeyboardButton(text=f"–ò–∑–º–µ–Ω–∏—Ç—å {action}", callback_data=f"change_{user_id}_{date}_{action}"))

    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("change_"))
def change_time(call):
    _, user_id, date, action = call.data.split("_")

    msg = bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è '{action}' –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
    bot.register_next_step_handler(msg, lambda message: update_time(message, user_id, date, action))


def update_time(message, user_id, date, action): 
    new_time = message.text.strip()
    try: 
        datetime.strptime(new_time, "%H:%M") 
    except ValueError: 
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.") 
        return 
    
    updated_rows = [] 
    updated = False 
    
    with open(WORKTIME_FILE, mode='r', encoding='utf-8') as file: 
        reader = csv.reader(file) 
        header = next(reader) 
        for row in reader: 
            if len(row) < 4: 
                continue 
            
            row_date = row[3].split()[0] 
            if row[0] == user_id and row_date == date and row[2] == action: 
                row[3] = f"{date} {new_time}:00" 
                updated = True 
            updated_rows.append(row) 
    
    if updated: 
        with open(WORKTIME_FILE, mode='w', newline='', encoding='utf-8') as file: 
            writer = csv.writer(file) 
            writer.writerow(["User ID", "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–î–µ–π—Å—Ç–≤–∏–µ", "–í—Ä–µ–º—è"]) 
            writer.writerows(updated_rows) 

        bot.send_message(message.chat.id, f"–í—Ä–µ–º—è –¥–ª—è '{action}' —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {user_id} –Ω–∞ {date} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {new_time}.") 
        generate_excel_report(user_id)  # –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Excel 
    else: 
        bot.send_message(message.chat.id, "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    
    # –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è CSV —Å—Ä–∞–∑—É –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç
    generate_excel_report(user_id)


def get_all_users():
    users = {}
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, 'r', encoding='utf-8') as file:
            reader = csv.reader(file)
            for row in reader:
                users[row[0]] = row[1]  # user_id -> user_name
    return users



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –≤ Excel –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
def generate_excel_report(user_id):  
    if not os.path.exists(WORKTIME_FILE):  
        return None  
    
    user_data = {}  
    with open(WORKTIME_FILE, mode='r', encoding='utf-8') as file:  
        reader = csv.reader(file)  
        next(reader, None)  
        for row in reader:  
            if len(row) != 4:  
                continue  
            uid, user_name, action, timestamp = row  
            if uid != str(user_id):  
                continue  
            timestamp = datetime.strptime(timestamp, "%Y-%m-%d %H:%M:%S")  
            date = timestamp.date()  
            
            if uid not in user_data:  
                user_data[uid] = {'name': user_name, 'log': {}}  
            
            if date not in user_data[uid]['log']:  
                user_data[uid]['log'][date] = {'start': None, 'lunch_out': None, 'lunch_in': None, 'end': None}  
            
            if action == "–ü—Ä–∏—à–µ–ª –Ω–∞ —Ä–∞–±–æ—Ç—É":  
                user_data[uid]['log'][date]['start'] = timestamp  
            elif action == "–í—ã—à–µ–ª –Ω–∞ –æ–±–µ–¥":  
                user_data[uid]['log'][date]['lunch_out'] = timestamp  
            elif action == "–í–µ—Ä–Ω—É–ª—Å—è —Å –æ–±–µ–¥–∞":  
                user_data[uid]['log'][date]['lunch_in'] = timestamp  
            elif action == "–£—à–µ–ª —Å —Ä–∞–±–æ—Ç—ã":  
                user_data[uid]['log'][date]['end'] = timestamp  
    
    if str(user_id) not in user_data:  
        return None  
    
    wb = Workbook()  
    ws = wb.active  
    ws.title = "–†–∞–±–æ—á–∏–π –æ—Ç—á–µ—Ç"  
    ws.append(["ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–î–∞—Ç–∞", "–ù–∞—á–∞–ª–æ", "–û–±–µ–¥ (–≤—ã—Ö–æ–¥)", "–û–±–µ–¥ (–≤–æ–∑–≤—Ä–∞—Ç)", "–ö–æ–Ω–µ—Ü", "–ß–∞—Å—ã –∑–∞ –¥–µ–Ω—å"])  
    
    total_hours_month = 0  
    total_hours_all = 0  
    
    for date, times in sorted(user_data[str(user_id)]['log'].items()):  
        start = times['start']  
        lunch_out = times['lunch_out']  
        lunch_in = times['lunch_in']  
        end = times['end']  
        
        total_hours = 0  
        if start and end:  
            total_hours = (end - start).seconds / 3600  
            if lunch_out and lunch_in:  
                total_hours -= (lunch_in - lunch_out).seconds / 3600  
            total_hours_month += total_hours  
            total_hours_all += total_hours  
        
        ws.append([user_id, user_data[str(user_id)]['name'], date.strftime("%Y-%m-%d"),  
                   start.strftime("%H:%M") if start else "",  
                   lunch_out.strftime("%H:%M") if lunch_out else "",  
                   lunch_in.strftime("%H:%M") if lunch_in else "",  
                   end.strftime("%H:%M") if end else "",  
                   round(total_hours, 2)])  
    
    ws.append([])  
    ws.append(["–ò—Ç–æ–≥–æ –∑–∞ –º–µ—Å—è—Ü", round(total_hours_month, 2)])  
    ws.append(["–ò—Ç–æ–≥–æ –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥", round(total_hours_all, 2)])  
    
    thin_border = Border(left=Side(style='thin'),  
                         right=Side(style='thin'),  
                         top=Side(style='thin'),  
                         bottom=Side(style='thin'))  
    
    for col in ws.columns:  
        for cell in col:  
            cell.border = thin_border  
            cell.alignment = Alignment(horizontal="center", vertical="center")  
            if cell.row == 1:  
                cell.font = Font(bold=True)  
    
    report_path = os.path.join(EXCEL_REPORT_DIR, f"report_{user_id}.xlsx")  
    wb.save(report_path)  
    return report_path
    
# –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é 
@bot.message_handler(commands=['send_excel_report'])
def send_excel_report(message):
    user_id = message.from_user.id
    report_file = generate_excel_report(user_id)
    
    if report_file and os.path.exists(report_file):
        with open(report_file, 'rb') as file:
            bot.send_document(message.chat.id, file, caption="–í–∞—à –ª–∏—á–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ä–∞–±–æ—á–µ–º –≤—Ä–µ–º–µ–Ω–∏.")
    else:
        bot.reply_to(message, "–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –µ—Å—Ç—å –ª–∏ —É –≤–∞—Å –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –æ—Ç–º–µ—Ç–∫–∏ –æ —Ä–∞–±–æ—á–µ–º –≤—Ä–µ–º–µ–Ω–∏.")

#87654321: "username2"
AUTO_USERS = {
    378268765: "ErlanNasiev",  

}

# –ù–∞—Å—Ç—Ä–æ–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã (–ø–æ —Ä–µ–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏)
def schedule_auto_records():
    weekdays_1 = [0, 2, 4]  
    weekdays_2 = [1, 3]

    for user_id, username in AUTO_USERS.items():
        # –ü–ù, –°–†, –ü–¢ - 08:29, 12:00, 13:00, 17:30
        scheduler.add_job(save_work_time, "cron", day_of_week="mon,wed,fri", hour=8, minute=29,
                          args=[user_id, username, "–ü—Ä–∏—à–µ–ª –Ω–∞ —Ä–∞–±–æ—Ç—É"])
        scheduler.add_job(save_work_time, "cron", day_of_week="mon,wed,fri", hour=12, minute=0,
                          args=[user_id, username, "–í—ã—à–µ–ª –Ω–∞ –æ–±–µ–¥"])
        scheduler.add_job(save_work_time, "cron", day_of_week="mon,wed,fri", hour=13, minute=0,
                          args=[user_id, username, "–í–µ—Ä–Ω—É–ª—Å—è —Å –æ–±–µ–¥–∞"])
        scheduler.add_job(save_work_time, "cron", day_of_week="mon,wed,fri", hour=17, minute=30,
                          args=[user_id, username, "–£—à–µ–ª —Å —Ä–∞–±–æ—Ç—ã"])

        # –í–¢, –ß–¢ - 08:28, 12:00, 13:00, 17:30
        scheduler.add_job(save_work_time, "cron", day_of_week="tue,thu", hour=8, minute=28,
                          args=[user_id, username, "–ü—Ä–∏—à–µ–ª –Ω–∞ —Ä–∞–±–æ—Ç—É"])
        scheduler.add_job(save_work_time, "cron", day_of_week="tue,thu", hour=12, minute=0,
                          args=[user_id, username, "–í—ã—à–µ–ª –Ω–∞ –æ–±–µ–¥"])
        scheduler.add_job(save_work_time, "cron", day_of_week="tue,thu", hour=13, minute=0,
                          args=[user_id, username, "–í–µ—Ä–Ω—É–ª—Å—è —Å –æ–±–µ–¥–∞"])
        scheduler.add_job(save_work_time, "cron", day_of_week="tue,thu", hour=17, minute=30,
                          args=[user_id, username, "–£—à–µ–ª —Å —Ä–∞–±–æ—Ç—ã"])

# –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
schedule_auto_records()
scheduler.start()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.infinity_polling()

print("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–∏ –≤–∫–ª—é—á–µ–Ω–∞.")
print('–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:',now)
while True:
    time.sleep(60)
    
