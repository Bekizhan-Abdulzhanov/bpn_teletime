import telebot
from datetime import datetime
import csv
import threading
from openpyxl import Workbook
from openpyxl.styles import Font, Border, Side, Alignment
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton,ReplyKeyboardMarkup, KeyboardButton
from apscheduler.schedulers.background import BackgroundScheduler
import time
import pytz
import qrcode
from waitress import serve
from flask import Flask
from dotenv import load_dotenv
load_dotenv()
import calendar



import os

os.environ['TZ'] = 'Asia/Bishkek'

kyrgyzstan_tz = pytz.timezone('Asia/Bishkek')
now = datetime.now(kyrgyzstan_tz)

TOKEN = os.environ.get("TOKEN")
if not TOKEN:
    raise Exception('–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')

bot = telebot.TeleBot(TOKEN)

app = Flask(__name__)

@app.route('/')
def index():
    return "Bot is running."


def run_flask():
    serve(app, host='0.0.0.0', port=5000)


common_qr_url = "https://t.me/BPN_KG_managetime_bot?start=checkin"
qr = qrcode.make(common_qr_url)
qr.save("common_qr_code.png")


WORKTIME_FILE = 'work_time.csv'
EXCEL_REPORT_DIR = 'work_reports'
USERS_FILE = 'users.csv'
ADMIN_ID = 557174721

  



if not os.path.exists(EXCEL_REPORT_DIR):
    os.makedirs(EXCEL_REPORT_DIR)



def save_work_time(user_id, user_name, action): 
    now = datetime.now(kyrgyzstan_tz).strftime("%Y-%m-%d %H:%M:%S")  
    file_exists = os.path.isfile(WORKTIME_FILE) 

    try: 
        with open(WORKTIME_FILE, mode='a', newline='', encoding='utf-8') as file: 
            writer = csv.writer(file) 
            if not file_exists: 
                writer.writerow(["User ID", "User Name", "Action", "Timestamp"]) 
            writer.writerow([user_id, user_name, action, now]) 
        print(f"[{now}] –ó–∞–ø–∏—Å–∞–Ω–æ: {user_name} ({user_id}) - {action}") 
    except Exception as e: 
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}") 


now = datetime.now(kyrgyzstan_tz).strftime("%Y-%m-%d %H:%M:%S")

scheduler = BackgroundScheduler()


@bot.message_handler(commands=['register'])
def register(message):
    user = message.from_user
    with open(USERS_FILE, mode='a', newline='', encoding='utf-8') as file:
        writer = csv.writer(file)
        writer.writerow([user.id, user.username, 'pending'])
    bot.send_message(ADMIN_ID, f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç {user.username} ({user.id})",
                     reply_markup=approve_keyboard(user.id))
    bot.reply_to(message, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.")


def approve_keyboard(user_id):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_{user_id}"))
    markup.add(InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}"))
    return markup

@bot.callback_query_handler(func=lambda call: call.data.startswith("approve_"))
def approve_user(call):
    user_id = call.data.split("_")[1]
    update_user_status(user_id, "approved")
    bot.send_message(user_id, "–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–¥–æ–±—Ä–µ–Ω–∞!")
    bot.send_message(ADMIN_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–¥–æ–±—Ä–µ–Ω.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("reject_"))
def reject_user(call):
    user_id = call.data.split("_")[1]
    update_user_status(user_id, "rejected")
    bot.send_message(user_id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    bot.send_message(ADMIN_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω.")


def update_user_status(user_id, status):
    users = []
    with open(USERS_FILE, mode='r', encoding='utf-8') as file:
        reader = csv.reader(file)
        for row in reader:
            if row[0] == user_id:
                row[2] = status
            users.append(row)
    with open(USERS_FILE, mode='w', newline='', encoding='utf-8') as file:
        writer = csv.writer(file)
        writer.writerows(users)


def is_user_approved(user_id):
    with open(USERS_FILE, mode='r', encoding='utf-8') as file:
        reader = csv.reader(file)
        for row in reader:
            if row[0] == str(user_id) and row[2] == 'approved':
                return True
    return False



@bot.message_handler(commands=['1'])
def show_menu(message):
    if not is_user_approved(message.from_user.id):
        bot.reply_to(message, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞.")
        return

    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    markup.add(
        KeyboardButton("üçΩ –í—ã—à–µ–ª –Ω–∞ –æ–±–µ–¥")
    )
    markup.add(
        KeyboardButton("üçΩ –í–µ—Ä–Ω—É–ª—Å—è —Å –æ–±–µ–¥–∞"),
        KeyboardButton("üèÅ –£—à–µ–ª —Å —Ä–∞–±–æ—Ç—ã")
    )
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text in [ "üçΩ –í—ã—à–µ–ª –Ω–∞ –æ–±–µ–¥", "üçΩ –í–µ—Ä–Ω—É–ª—Å—è —Å –æ–±–µ–¥–∞", "üèÅ –£—à–µ–ª —Å —Ä–∞–±–æ—Ç—ã"])
def handle_work_time(message):
    if not is_user_approved(message.from_user.id):
        bot.reply_to(message, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞.")
        return

    user = message.from_user
    actions = {
        "üçΩ –í—ã—à–µ–ª –Ω–∞ –æ–±–µ–¥": "–í—ã—à–µ–ª –Ω–∞ –æ–±–µ–¥",
        "üçΩ –í–µ—Ä–Ω—É–ª—Å—è —Å –æ–±–µ–¥–∞": "–í–µ—Ä–Ω—É–ª—Å—è —Å –æ–±–µ–¥–∞",
        "üèÅ –£—à–µ–ª —Å —Ä–∞–±–æ—Ç—ã": "–£—à–µ–ª —Å —Ä–∞–±–æ—Ç—ã"
    }
    
    action = actions[message.text]
    save_work_time(user.id, user.username, action)
    bot.reply_to(message, f"–í—ã –æ—Ç–º–µ—Ç–∏–ª–∏: {message.text}")



@bot.message_handler(commands=['start'])
def start_work(message):
    if not is_user_approved(message.from_user.id):
        bot.reply_to(message, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞.")
        return
    user = message.from_user
    save_work_time(user.id, user.username, "–ü—Ä–∏—à–µ–ª –Ω–∞ —Ä–∞–±–æ—Ç—É")
    bot.reply_to(message, f"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, {user.first_name}! –í—ã –æ—Ç–º–µ—Ç–∏–ª–∏ –ø—Ä–∏—Ö–æ–¥ –Ω–∞ —Ä–∞–±–æ—Ç—É.")

@bot.message_handler(commands=['lunch_out'])
def lunch_out(message):
    if not is_user_approved(message.from_user.id):
        bot.reply_to(message, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞.")
        return    
    user = message.from_user
    save_work_time(user.id, user.username, "–í—ã—à–µ–ª –Ω–∞ –æ–±–µ–¥")
    bot.reply_to(message, "–í—ã –æ—Ç–º–µ—Ç–∏–ª–∏ –≤—ã—Ö–æ–¥ –Ω–∞ –æ–±–µ–¥.")

@bot.message_handler(commands=['lunch_in'])
def lunch_in(message):
    if not is_user_approved(message.from_user.id):
        bot.reply_to(message, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞.")
        return    
    user = message.from_user
    save_work_time(user.id, user.username, "–í–µ—Ä–Ω—É–ª—Å—è —Å –æ–±–µ–¥–∞")
    bot.reply_to(message, "–í—ã –æ—Ç–º–µ—Ç–∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ —Å –æ–±–µ–¥–∞.")

@bot.message_handler(commands=['end'])
def end_work(message):
    if not is_user_approved(message.from_user.id):
        bot.reply_to(message, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞.")
        return     
    user = message.from_user
    save_work_time(user.id, user.username, "–£—à–µ–ª —Å —Ä–∞–±–æ—Ç—ã")
    bot.reply_to(message, f"–î–æ —Å–≤–∏–¥–∞–Ω–∏—è, {user.first_name}! –í—ã –æ—Ç–º–µ—Ç–∏–ª–∏ —É—Ö–æ–¥ —Å —Ä–∞–±–æ—Ç—ã.")

@bot.message_handler(commands=['ping'])
def ping(message):
    bot.reply_to(message, "pong")

@bot.message_handler(commands=['all_reports'])
def all_reports(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.")
        return
    for user_id in get_all_users():
        report_file = generate_excel_report(user_id)
        if report_file:
            with open(report_file, 'rb') as file:
                bot.send_document(ADMIN_ID, file, caption=f"–û—Ç—á–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {user_id}")

@bot.message_handler(commands=['edit_time'])
def edit_time(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
        return
    
    markup = InlineKeyboardMarkup()
    
    if not os.path.exists(WORKTIME_FILE):
        bot.reply_to(message, "–§–∞–π–ª —Å —Ä–∞–±–æ—á–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return
    
    users = {}
    with open(WORKTIME_FILE, mode='r', encoding='utf-8') as file:
        reader = csv.reader(file)
        next(reader, None)  
        for row in reader:
            if len(row) < 2:
                continue
            user_id, user_name = row[0], row[1]
            users[user_id] = user_name

    for user_id, user_name in users.items():
        markup.add(InlineKeyboardButton(text=user_name, callback_data=f"edit_{user_id}"))

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_"))
def select_employee(call):
    user_id = call.data.split("_")[1]
    
    markup = InlineKeyboardMarkup()
    
    dates = set()
    with open(WORKTIME_FILE, mode='r', encoding='utf-8') as file:
        reader = csv.reader(file)
        next(reader, None)
        for row in reader:
            if len(row) < 4:
                continue
            if row[0] == user_id:
                date = row[3].split()[0]
                dates.add(date)

    for date in sorted(dates):
        markup.add(InlineKeyboardButton(text=date, callback_data=f"date_{user_id}_{date}"))

    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("date_"))
def select_date(call):
    _, user_id, date = call.data.split("_")

    markup = InlineKeyboardMarkup()
    actions = ["–ü—Ä–∏—à–µ–ª –Ω–∞ —Ä–∞–±–æ—Ç—É", "–í—ã—à–µ–ª –Ω–∞ –æ–±–µ–¥", "–í–µ—Ä–Ω—É–ª—Å—è —Å –æ–±–µ–¥–∞", "–£—à–µ–ª —Å —Ä–∞–±–æ—Ç—ã"]

    for action in actions:
        markup.add(InlineKeyboardButton(text=f"–ò–∑–º–µ–Ω–∏—Ç—å {action}", callback_data=f"change_{user_id}_{date}_{action}"))

    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("change_"))
def change_time(call):
    _, user_id, date, action = call.data.split("_")

    msg = bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è '{action}' –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
    bot.register_next_step_handler(msg, lambda message: update_time(message, user_id, date, action))


def update_time(message, user_id, date, action): 
    new_time = message.text.strip()
    try: 
        datetime.strptime(new_time, "%H:%M") 
    except ValueError: 
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.") 
        return 
    
    updated_rows = [] 
    updated = False 
    
    with open(WORKTIME_FILE, mode='r', encoding='utf-8') as file: 
        reader = csv.reader(file) 
        header = next(reader) 
        for row in reader: 
            if len(row) < 4: 
                continue 
            
            row_date = row[3].split()[0] 
            if row[0] == user_id and row_date == date and row[2] == action: 
                row[3] = f"{date} {new_time}:00" 
                updated = True 
            updated_rows.append(row) 
    
    if updated: 
        with open(WORKTIME_FILE, mode='w', newline='', encoding='utf-8') as file: 
            writer = csv.writer(file) 
            writer.writerow(["User ID", "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–î–µ–π—Å—Ç–≤–∏–µ", "–í—Ä–µ–º—è"]) 
            writer.writerows(updated_rows) 

        bot.send_message(message.chat.id, f"–í—Ä–µ–º—è –¥–ª—è '{action}' —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {user_id} –Ω–∞ {date} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {new_time}.") 
        generate_excel_report(user_id)  # –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Excel 
    else: 
        bot.send_message(message.chat.id, "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    
    # –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è CSV —Å—Ä–∞–∑—É –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç
    generate_excel_report(user_id)


def get_all_users():
    users = {}
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, 'r', encoding='utf-8') as file:
            reader = csv.reader(file)
            for row in reader:
                users[row[0]] = row[1]  
    return users




def generate_final_monthly_report(user_id, user_name, user_log, output_dir="work_reports"):
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    wb = Workbook()

    for month_idx in range(1, 13):
        month_data = {
            dt: user_log[dt] for dt in user_log
            if dt.month == month_idx
        }
        if not month_data:
            continue

        sheet_name = calendar.month_name[month_idx]
        ws = wb.create_sheet(title=sheet_name)

        ws.merge_cells('A1:I1')
        ws['A1'] = "–¢–∞–±–µ–ª—å / Arbeitsblatt"
        ws['A1'].font = Font(size=14, bold=True)
        ws['A1'].alignment = Alignment(horizontal="center")

        ws['A2'] = "–ö–æ–º–ø–∞–Ω–∏—è / Firma:"
        ws['B2'] = "–û—Å–û–û ¬´Business Academy BPN¬ª"
        ws['A3'] = "–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ / Name des Mitarbeiters:"
        ws['B3'] = user_name
        ws['A4'] = "–î–æ–ª–∂–Ω–æ—Å—Ç—å / Funktion:"
        ws['B4'] = "–°–æ—Ç—Ä—É–¥–Ω–∏–∫"

        headers = ["–î–µ–Ω—å", "–î–∞—Ç–∞", "–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã", "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ", "–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞"]
        ws.append([])
        ws.append(headers)

        total_hours = 0
        work_norm = 8

        for day in range(1, 32):
            try:
                date = datetime(datetime.now().year, month_idx, day).date()
            except ValueError:
                continue

            record = user_log.get(date, {})
            worked_hours = 0
            if "start" in record and "end" in record:
                worked_hours = (record["end"] - record["start"]).seconds / 3600
                if "lunch_out" in record and "lunch_in" in record:
                    worked_hours -= (record["lunch_in"] - record["lunch_out"]).seconds / 3600
                worked_hours = round(worked_hours, 2)

            total_hours += worked_hours

            ws.append([
                day,
                date.strftime("%d.%m.%Y"),
                worked_hours if worked_hours else "",
                "" if worked_hours else "1",
                ""
            ])

        ws.append([])
        ws.append(["", "", "–ò—Ç–æ–≥–æ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ / Total geleistete Arbeitszeit:", round(total_hours, 2)])
        ws.append(["", "", "–ò—Ç–æ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ / Total Absenz:", "0"])
        ws.append(["", "", "–ò—Ç–æ–≥–æ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ / Total √úberstunden:", "0"])

        ws.append([])
        ws.append(["–ü–æ–ª–µ –¥–ª—è –ø–æ—è—Å–Ω–µ–Ω–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ / Notizen und Anmerkungen Mitarbeiter:"])
        ws.append([])
        ws.append(["–ü–æ–ª–µ –¥–ª—è –ø–æ—è—Å–Ω–µ–Ω–∏–π –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∞ / Notizen und Anmerkungen Buchhaltung:"])
        ws.append([])
        ws.append(["", "", "–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ –Ω–∞—á–∞–ª–æ / √úberstunden aus Vorperiode:", ""])
        ws.append(["", "", "–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ –º–µ—Å—è—Ü / Total geleistete Arbeitszeit IST:", round(total_hours, 2)])
        ws.append(["", "", "–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ –∑–∞ –º–µ—Å—è—Ü / Total √úberstunden in diesem Monat:", ""])
        ws.append(["", "", "–ú–µ—Å—è—á–Ω—ã–π –ù–æ—Ä–º–∞—Ç–∏–≤ / Total Arbeitszeit SOLL:", "152"])
        ws.append(["", "", "–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –∫–æ–Ω–µ—Ü / Total √úberstunden Aktuell:", ""])
        ws.append(["", "", "–û–ø–ª–∞—á–∏–≤–∞–µ–º—ã—Ö —á–∞—Å–æ–≤ / Bezahlte Arbeitszeit:", ""])

        thin_border = Border(left=Side(style='thin'), right=Side(style='thin'),
                             top=Side(style='thin'), bottom=Side(style='thin'))
        for row in ws.iter_rows(min_row=6, max_col=5, max_row=ws.max_row):
            for cell in row:
                cell.border = thin_border
                cell.alignment = Alignment(horizontal="center", vertical="center")

    if 'Sheet' in wb.sheetnames:
        wb.remove(wb['Sheet'])

    file_name = f"{output_dir}/BPN_Report_{user_name}_{datetime.now().strftime('%Y%m%d')}.xlsx"
    wb.save(file_name)
    return file_name


# --------------------- –î–û–ë–ê–í–õ–ï–ù–ù–ê–Ø –ö–û–ú–ê–ù–î–ê –î–õ–Ø –ë–û–¢–ê ---------------------
@bot.message_handler(commands=['report_sheet'])
def send_monthly_sheet(message):
    user_id = message.from_user.id
    user_name = message.from_user.username

    log_data = {}
    if os.path.exists(WORKTIME_FILE):
        with open(WORKTIME_FILE, mode='r', encoding='utf-8') as file:
            reader = csv.reader(file)
            next(reader, None)
            for row in reader:
                if len(row) < 4:
                    continue
                uid, uname, action, timestamp = row
                if str(user_id) != uid:
                    continue
                dt = datetime.strptime(timestamp, "%Y-%m-%d %H:%M:%S")
                if dt.date() not in log_data:
                    log_data[dt.date()] = {}
                if action == "–ü—Ä–∏—à–µ–ª –Ω–∞ —Ä–∞–±–æ—Ç—É":
                    log_data[dt.date()]["start"] = dt
                elif action == "–í—ã—à–µ–ª –Ω–∞ –æ–±–µ–¥":
                    log_data[dt.date()]["lunch_out"] = dt
                elif action == "–í–µ—Ä–Ω—É–ª—Å—è —Å –æ–±–µ–¥–∞":
                    log_data[dt.date()]["lunch_in"] = dt
                elif action == "–£—à–µ–ª —Å —Ä–∞–±–æ—Ç—ã":
                    log_data[dt.date()]["end"] = dt

    if not log_data:
        bot.reply_to(message, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞.")
        return

    file_path = generate_final_monthly_report(user_id, user_name, log_data)

    if file_path and os.path.exists(file_path):
        with open(file_path, "rb") as file:
            bot.send_document(message.chat.id, file, caption="–í–∞—à —Ç–∞–±–µ–ª—å –ø–æ –º–µ—Å—è—Ü–∞–º (Excel).")
    else:
        bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç.")



def run_bot():
    bot.infinity_polling()


flask_thread = threading.Thread(target=run_flask)
flask_thread.start()


def run_bot():
    bot.infinity_polling()

if __name__ == '__main__':
    
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.start()

    bot.remove_webhook()

    bot.infinity_polling()

PORT =int(os.environ.get("PORT",5000))
def run_flask():
    serve(app,host='0.0.0.0',port=PORT)

import datetime
import time
from apscheduler.schedulers.background import BackgroundScheduler

scheduler = BackgroundScheduler()

AUTO_USERS = {
    378268765: "ErlanNasiev",
    557174721: "BekizhanAbdulzhanov",
}

# –ù–∞—Å—Ç—Ä–æ–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
def schedule_auto_records():
    for user_id, username in AUTO_USERS.items():
        # –ü–ù, –°–†, –ü–¢ - 08:29, 12:00, 13:00, 17:30
        scheduler.add_job(save_work_time, "cron", day_of_week="mon,wed,fri", hour=8, minute=29,
                          args=[user_id, username, "–ü—Ä–∏—à–µ–ª –Ω–∞ —Ä–∞–±–æ—Ç—É"])
        scheduler.add_job(save_work_time, "cron", day_of_week="mon,wed,fri", hour=12, minute=0,
                          args=[user_id, username, "–í—ã—à–µ–ª –Ω–∞ –æ–±–µ–¥"])
        scheduler.add_job(save_work_time, "cron", day_of_week="mon,wed,fri", hour=13, minute=0,
                          args=[user_id, username, "–í–µ—Ä–Ω—É–ª—Å—è —Å –æ–±–µ–¥–∞"])
        scheduler.add_job(save_work_time, "cron", day_of_week="mon,wed,fri", hour=17, minute=30,
                          args=[user_id, username, "–£—à–µ–ª —Å —Ä–∞–±–æ—Ç—ã"])

        # –í–¢, –ß–¢ - 08:28, 12:00, 13:00, 17:30
        scheduler.add_job(save_work_time, "cron", day_of_week="tue,thu", hour=8, minute=28,
                          args=[user_id, username, "–ü—Ä–∏—à–µ–ª –Ω–∞ —Ä–∞–±–æ—Ç—É"])
        scheduler.add_job(save_work_time, "cron", day_of_week="tue,thu", hour=12, minute=0,
                          args=[user_id, username, "–í—ã—à–µ–ª –Ω–∞ –æ–±–µ–¥"])
        scheduler.add_job(save_work_time, "cron", day_of_week="tue,thu", hour=13, minute=0,
                          args=[user_id, username, "–í–µ—Ä–Ω—É–ª—Å—è —Å –æ–±–µ–¥–∞"])
        scheduler.add_job(save_work_time, "cron", day_of_week="tue,thu", hour=17, minute=30,
                          args=[user_id, username, "–£—à–µ–ª —Å —Ä–∞–±–æ—Ç—ã"])


schedule_auto_records()

time.sleep(2) 
if not scheduler.running:
    scheduler.start()

print("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–∏ –≤–∫–ª—é—á–µ–Ω–∞.")
print("–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:", datetime.datetime.now())

