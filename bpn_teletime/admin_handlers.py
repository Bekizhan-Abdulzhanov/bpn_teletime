import csv
from datetime import datetime
from telebot import TeleBot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from config import ADMIN_IDS
from storage import get_all_users, get_user_dates, update_work_time_entry
from reports import generate_excel_report_by_months

# –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –º–Ω–æ–≥–æ—à–∞–≥–æ–≤–æ–≥–æ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
CTX: dict[int, dict] = {}

def register_admin_handlers(bot: TeleBot):
    @bot.message_handler(commands=['admin', 'menu', 'edit_time'])
    def admin_menu(message):
        if message.from_user.id not in ADMIN_IDS:
            return bot.reply_to(message, "‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        # –®–∞–≥ 1: –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton("üïí –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", callback_data="et_start"),
            InlineKeyboardButton("üìä –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç—ã –≤—Å–µ–º", callback_data="send_all_reports"),
        )
        bot.send_message(message.chat.id, "üîß –ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=markup)

    @bot.callback_query_handler(func=lambda c: c.data == 'et_start')
    def cb_start_edit(call):
        bot.answer_callback_query(call.id)
        # –®–∞–≥ 2: –≤—ã–±—Ä–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        users = get_all_users()
        if not users:
            return bot.send_message(call.message.chat.id, "üë• –ù–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        CTX[call.message.chat.id] = {}
        markup = InlineKeyboardMarkup(row_width=1)
        for uid, uname in users.items():
            markup.add(InlineKeyboardButton(f"{uname} ({uid})", callback_data=f"et_user:{uid}"))
        bot.edit_message_text("1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", call.message.chat.id, call.message.message_id, reply_markup=markup)

    @bot.callback_query_handler(func=lambda c: c.data.startswith('et_user:'))
    def cb_pick_user(call):
        bot.answer_callback_query(call.id)
        chat_id = call.message.chat.id
        uid = call.data.split(':',1)[1]
        CTX[chat_id]['user_id'] = uid
        # –®–∞–≥ 3: –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∏–∑ –∏–º–µ—é—â–∏—Ö—Å—è
        dates = get_user_dates(uid)
        if not dates:
            return bot.send_message(chat_id, "‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        markup = InlineKeyboardMarkup(row_width=2)
        for d in dates:
            markup.add(InlineKeyboardButton(d, callback_data=f"et_date:{d}"))
        bot.edit_message_text("2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", chat_id, call.message.message_id, reply_markup=markup)

    @bot.callback_query_handler(func=lambda c: c.data.startswith('et_date:'))
    def cb_pick_date(call):
        bot.answer_callback_query(call.id)
        chat_id = call.message.chat.id
        date_str = call.data.split(':',1)[1]
        CTX[chat_id]['date'] = date_str
        # –®–∞–≥ 4: –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –æ—Ç–º–µ—Ç–∫–∏
        actions = ["–ü—Ä–∏—à–µ–ª –Ω–∞ —Ä–∞–±–æ—Ç—É", "–í—ã—à–µ–ª –Ω–∞ –æ–±–µ–¥", "–í–µ—Ä–Ω—É–ª—Å—è —Å –æ–±–µ–¥–∞", "–£—à–µ–ª —Å —Ä–∞–±–æ—Ç—ã"]
        markup = InlineKeyboardMarkup(row_width=1)
        for act in actions:
            code = act.replace(" ", "_")
            markup.add(InlineKeyboardButton(act, callback_data=f"et_act:{code}"))
        bot.edit_message_text("3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç–º–µ—Ç–∫–∏:", chat_id, call.message.message_id, reply_markup=markup)

    @bot.callback_query_handler(func=lambda c: c.data.startswith('et_act:'))
    def cb_pick_action(call):
        bot.answer_callback_query(call.id)
        chat_id = call.message.chat.id
        code = call.data.split(':',1)[1]
        CTX[chat_id]['action'] = code.replace("_", " ")
        # –®–∞–≥ 5: –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        bot.edit_message_text(
            "4Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ `HH:MM:SS` (–Ω–∞–ø—Ä–∏–º–µ—Ä `08:30:00`):",
            chat_id, call.message.message_id,
            parse_mode='Markdown'
        )

    @bot.message_handler(func=lambda m: m.chat.id in CTX and 'action' in CTX[m.chat.id] and 'done' not in CTX[m.chat.id])
    def cb_input_time(message):
        chat_id = message.chat.id
        ctx = CTX[chat_id]
        time_str = message.text.strip()
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
        try:
            datetime.strptime(time_str, "%H:%M:%S")
        except ValueError:
            return bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `HH:MM:SS`.", parse_mode='Markdown')
        # –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
        ok = update_work_time_entry(
            ctx['user_id'],
            ctx['date'],
            ctx['action'],
            time_str
        )
        if ok:
            bot.reply_to(
                message,
                f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è `{ctx['user_id']}`:\n"
                f"*{ctx['action']}* ‚Üí `{ctx['date']} {time_str}`",
                parse_mode='Markdown'
            )
        else:
            bot.reply_to(message, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        ctx['done'] = True
        # –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        CTX.pop(chat_id, None)

    @bot.callback_query_handler(func=lambda c: c.data == 'send_all_reports')
    def handle_send_reports(call):
        if call.from_user.id not in ADMIN_IDS:
            return bot.answer_callback_query(call.id, "‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        for uid, uname in get_all_users().items():
            buf = generate_excel_report_by_months(uid, uname)
            if buf:
                filename = f"Report_{uname}_{datetime.now().strftime('%Y-%m-%d')}.xlsx"
                bot.send_document(call.message.chat.id, InputFile(buf, filename),
                                  caption=f"–û—Ç—á—ë—Ç {uname}")
        bot.answer_callback_query(call.id, "‚úÖ –û—Ç—á—ë—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ–º.")

