import os
import csv
from datetime import datetime
from telebot.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, InputFile
)
from config import ADMIN_PASSWORD
from storage import save_work_time, is_user_approved, get_all_users
from reports import generate_excel_report_by_months

ADMINS_FILE = 'admins.csv'

# --- Admin utils ---
def is_admin(user_id):
    if not os.path.exists(ADMINS_FILE):
        return False
    with open(ADMINS_FILE, 'r', encoding='utf-8') as file:
        return str(user_id) in [line.strip() for line in file]

def add_admin(user_id):
    with open(ADMINS_FILE, 'a', encoding='utf-8') as file:
        file.write(f"{user_id}\n")

# --- Handlers ---
def register_handlers(bot):

    def show_menu(message):
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(
            KeyboardButton("üçΩ –í—ã—à–µ–ª –Ω–∞ –æ–±–µ–¥"),
            KeyboardButton("üçΩ –í–µ—Ä–Ω—É–ª—Å—è —Å –æ–±–µ–¥–∞"),
            KeyboardButton("üèë –£—à–µ–ª —Å —Ä–∞–±–æ—Ç—ã")
        )
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

    @bot.message_handler(commands=['start'])
    def start_work(message):
        user_id = message.from_user.id
        username = message.from_user.username or f"user_{user_id}"
        if not is_user_approved(user_id):
            return bot.reply_to(message, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /register.")
        save_work_time(user_id, username, "–ü—Ä–∏—à–µ–ª –Ω–∞ —Ä–∞–±–æ—Ç—É")
        bot.reply_to(message, f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!")
        show_menu(message)

    @bot.message_handler(commands=['register'])
    def register_user(message):
        user_id = message.from_user.id
        username = message.from_user.username or f"user_{user_id}"
        if is_user_approved(user_id):
            return bot.reply_to(message, "‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        with open('users.csv', 'a', encoding='utf-8') as file:
            file.write(f"{user_id},{username},1\n")
        bot.reply_to(message, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")

    @bot.message_handler(commands=['admin'])
    def ask_admin_password(message):
        msg = bot.reply_to(message, "üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∞:")
        bot.register_next_step_handler(msg, check_admin_password)

    def check_admin_password(message):
        user_id = message.from_user.id
        if message.text.strip() == ADMIN_PASSWORD:
            add_admin(user_id)
            bot.reply_to(message, "‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
        else:
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")

    @bot.message_handler(commands=['admin_menu'])
    def admin_menu(message):
        if not is_admin(message.from_user.id):
            return bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞.")
        markup = InlineKeyboardMarkup()
        for user_id, username in get_all_users().items():
            markup.add(InlineKeyboardButton(f"{username} ({user_id})", callback_data=f"edit_{user_id}"))
        bot.send_message(message.chat.id, "üë§ –í—ã–±–µ—Ä–∏—Ç–µ —é–∑–µ—Ä–∞:", reply_markup=markup)

    @bot.message_handler(func=lambda m: m.text in [
        "üçΩ –í—ã—à–µ–ª –Ω–∞ –æ–±–µ–¥",
        "üçΩ –í–µ—Ä–Ω—É–ª—Å—è —Å –æ–±–µ–¥–∞",
        "üèë –£—à–µ–ª —Å —Ä–∞–±–æ—Ç—ã"])
    def handle_work_time(message):
        if not is_user_approved(message.from_user.id):
            return bot.reply_to(message, "‚ùå –í—ã –Ω–µ –æ–¥–æ–±—Ä–µ–Ω—ã.")
        actions = {
            "üçΩ –í—ã—à–µ–ª –Ω–∞ –æ–±–µ–¥": "–í—ã—à–µ–ª –Ω–∞ –æ–±–µ–¥",
            "üçΩ –í–µ—Ä–Ω—É–ª—Å—è —Å –æ–±–µ–¥–∞": "–í–µ—Ä–Ω—É–ª—Å—è —Å –æ–±–µ–¥–∞",
            "üèë –£—à–µ–ª —Å —Ä–∞–±–æ—Ç—ã": "–£—à–µ–ª —Å —Ä–∞–±–æ—Ç—ã"
        }
        action = actions[message.text]
        save_work_time(message.from_user.id, message.from_user.username, action)
        bot.reply_to(message, f"‚úÖ –û—Ç–º–µ—á–µ–Ω–æ: {action}")

    @bot.message_handler(commands=['send_excel_report'])
    def send_excel_report(message):
        user_id = message.from_user.id
        if not is_user_approved(user_id):
            return bot.reply_to(message, "‚ùå –í—ã –Ω–µ –æ–¥–æ–±—Ä–µ–Ω—ã.")
        username = message.from_user.username or f"user_{user_id}"
        file_data = generate_excel_report_by_months(user_id, username)
        if file_data:
            filename = f"Report_{username}_{datetime.now().strftime('%Y-%m-%d')}.xlsx"
            bot.send_document(message.chat.id, InputFile(file_data, filename), caption="üìÑ –í–∞—à –æ—Ç—á–µ—Ç")
        else:
            bot.reply_to(message, "‚ö†Ô∏è –û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    @bot.message_handler(commands=['1'])
    def manual_menu(message):
        if not is_user_approved(message.from_user.id):
            return bot.reply_to(message, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞.")
        show_menu(message)

    @bot.message_handler(func=lambda message: message.text in [
        "üçΩ –í—ã—à–µ–ª –Ω–∞ –æ–±–µ–¥", "üçΩ –í–µ—Ä–Ω—É–ª—Å—è —Å –æ–±–µ–¥–∞", "üèÅ –£—à–µ–ª —Å —Ä–∞–±–æ—Ç—ã"])
    def handle_work_time(message):
        if not is_user_approved(message.from_user.id):
            return bot.reply_to(message, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞.")
        user = message.from_user
        action_text = {
            "üçΩ –í—ã—à–µ–ª –Ω–∞ –æ–±–µ–¥": "–í—ã—à–µ–ª –Ω–∞ –æ–±–µ–¥",
            "üçΩ –í–µ—Ä–Ω—É–ª—Å—è —Å –æ–±–µ–¥–∞": "–í–µ—Ä–Ω—É–ª—Å—è —Å –æ–±–µ–¥–∞",
            "üèÅ –£—à–µ–ª —Å —Ä–∞–±–æ—Ç—ã": "–£—à–µ–ª —Å —Ä–∞–±–æ—Ç—ã"
        }.get(message.text)
        save_work_time(user.id, user.username, action_text)
        bot.reply_to(message, f"‚úÖ –í—ã –æ—Ç–º–µ—Ç–∏–ª–∏: {message.text}")

    @bot.message_handler(commands=['all_reports'])
    def send_all_reports(message):
        if message.from_user.id != ADMIN_ID:
            return bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é.")
        for user_id, username in get_all_users().items():
            file_data = generate_excel_report_by_months(user_id, username)
            if file_data:
                filename = f"Report_{username}_{datetime.now().strftime('%Y-%m-%d')}.xlsx"
                bot.send_document(message.chat.id, InputFile(file_data, filename), caption=f"üìé –û—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
            else:
                bot.send_message(message.chat.id, f"‚ùå –û—Ç—á–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
