import os
import csv
from datetime import datetime
from io import BytesIO
from telebot.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InputFile,
)
from storage import save_work_time, is_user_approved, get_all_users
from reports import generate_excel_report_by_months
from config import ADMIN_ID

TRUSTED_USERS = [ADMIN_ID]  # –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏

def register_handlers(bot):

    def show_menu(message):
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(
            KeyboardButton("üçΩ –í—ã—à–µ–ª –Ω–∞ –æ–±–µ–¥"),
            KeyboardButton("üçΩ –í–µ—Ä–Ω—É–ª—Å—è —Å –æ–±–µ–¥–∞"),
            KeyboardButton("üèÅ –£—à–µ–ª —Å —Ä–∞–±–æ—Ç—ã")
        )
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

    @bot.message_handler(commands=['start'])
    def start_work(message):
        user_id = str(message.from_user.id)
        username = message.from_user.username or f"user_{user_id}"
        name = message.from_user.first_name

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω –∏–ª–∏ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–π
        is_admin = int(user_id) == ADMIN_ID
        approved = 1 if is_admin or int(user_id) in TRUSTED_USERS else 0

        already_registered = False
        if os.path.exists('users.csv'):
            with open('users.csv', 'r', encoding='utf-8') as file:
                for line in file:
                    if line.startswith(user_id + ","):
                        already_registered = True
                        break

        if not already_registered:
            with open('users.csv', 'a', encoding='utf-8') as file:
                file.write(f"{user_id},{username},{approved}\n")

        if approved:
            bot.reply_to(message, "‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –æ–¥–æ–±—Ä–µ–Ω—ã.")
            save_work_time(user_id, username, "–ü—Ä–∏—à–µ–ª –Ω–∞ —Ä–∞–±–æ—Ç—É")
            show_menu(message)
        else:
            bot.reply_to(message, "üìù –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è.")

            markup = InlineKeyboardMarkup()
            markup.add(
                InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{user_id}"),
                InlineKeyboardButton("üö´ –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}")
            )

            bot.send_message(
                ADMIN_ID,
                f"üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\nüë§ @{username} ({user_id})\n–ò–º—è: {name}",
                reply_markup=markup
            )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("approve_"))
    def approve_user(call):
        user_id = call.data.split("_")[1]
        updated = False
        rows = []

        with open('users.csv', 'r', encoding='utf-8') as file:
            for row in file:
                parts = row.strip().split(',')
                if parts[0] == user_id:
                    parts[2] = '1'
                    updated = True
                rows.append(','.join(parts))

        if updated:
            with open('users.csv', 'w', encoding='utf-8') as file:
                file.write('\n'.join(rows) + '\n')
            bot.edit_message_text(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–¥–æ–±—Ä–µ–Ω.",
                call.message.chat.id,
                call.message.message_id
            )
            try:
                bot.send_message(user_id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
            except:
                pass
        else:
            bot.answer_callback_query(call.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("reject_"))
    def reject_user(call):
        user_id = call.data.split("_")[1]
        rows = []

        with open('users.csv', 'r', encoding='utf-8') as file:
            for row in file:
                if not row.startswith(user_id + ","):
                    rows.append(row.strip())

        with open('users.csv', 'w', encoding='utf-8') as file:
            file.write('\n'.join(rows) + '\n')

        bot.edit_message_text(
            f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω –∏ —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.",
            call.message.chat.id,
            call.message.message_id
        )

        try:
            bot.send_message(user_id, "üö´ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        except:
            pass

    @bot.message_handler(commands=['send_excel_report'])
    def send_excel_report(message):
        user_id = message.from_user.id
        if not is_user_approved(user_id):
            return bot.reply_to(message, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞.")

        username = message.from_user.username or f"user_{user_id}"
        file_data = generate_excel_report_by_months(user_id, username)

        if file_data:
            filename = f"Report_{username}_{datetime.now().strftime('%Y-%m-%d')}.xlsx"
            bot.send_document(
                message.chat.id,
                InputFile(file_data, filename),
                caption="üìÑ –í–∞—à –æ—Ç—á—ë—Ç –æ —Ä–∞–±–æ—á–µ–º –≤—Ä–µ–º–µ–Ω–∏."
            )
        else:
            bot.reply_to(message, "‚ö†Ô∏è –û—Ç—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å.")

    @bot.message_handler(commands=['1'])
    def manual_menu(message):
        if not is_user_approved(message.from_user.id):
            return bot.reply_to(message, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞.")
        show_menu(message)

    @bot.message_handler(func=lambda message: message.text in [
        "üçΩ –í—ã—à–µ–ª –Ω–∞ –æ–±–µ–¥", "üçΩ –í–µ—Ä–Ω—É–ª—Å—è —Å –æ–±–µ–¥–∞", "üèÅ –£—à–µ–ª —Å —Ä–∞–±–æ—Ç—ã"])
    def handle_work_time(message):
        if not is_user_approved(message.from_user.id):
            return bot.reply_to(message, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞.")
        user = message.from_user
        action_text = {
            "üçΩ –í—ã—à–µ–ª –Ω–∞ –æ–±–µ–¥": "–í—ã—à–µ–ª –Ω–∞ –æ–±–µ–¥",
            "üçΩ –í–µ—Ä–Ω—É–ª—Å—è —Å –æ–±–µ–¥–∞": "–í–µ—Ä–Ω—É–ª—Å—è —Å –æ–±–µ–¥–∞",
            "üèÅ –£—à–µ–ª —Å —Ä–∞–±–æ—Ç—ã": "–£—à–µ–ª —Å —Ä–∞–±–æ—Ç—ã"
        }.get(message.text)
        save_work_time(user.id, user.username, action_text)
        bot.reply_to(message, f"‚úÖ –í—ã –æ—Ç–º–µ—Ç–∏–ª–∏: {message.text}")

    @bot.message_handler(commands=['all_reports'])
    def send_all_reports(message):
        if message.from_user.id != ADMIN_ID:
            return bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é.")
        for user_id, username in get_all_users().items():
            file_data = generate_excel_report_by_months(user_id, username)
            if file_data:
                filename = f"Report_{username}_{datetime.now().strftime('%Y-%m-%d')}.xlsx"
                bot.send_document(message.chat.id, InputFile(file_data, filename), caption=f"üìé –û—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
            else:
                bot.send_message(message.chat.id, f"‚ùå –û—Ç—á–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
